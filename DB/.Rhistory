for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
print(srr[i,])
print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
next
} else if(is.numeric(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])){
next
} else {
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = F
}else{next}
}
}
}
gg2
srr
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
print(srr[i,])
print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
next
} else if(is.numeric(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])){
next
} else {
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = 99999999
}else{next}
}
}
}
gg2
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
gg2
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next
} else if(is.numeric(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])){
print(2)
next
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = F
}else{next}
}
}
}
gg2
rr = dd
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next
} else if(is.numeric(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])){
print(2)
next
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = F
}else{next}
}
print(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])
}
}
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next()
} else if(is.numeric(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])){
print(2)
next()
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = F
}else{next()}
}
print(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])
}
}
gg2
reads
rr[rr$reads == r, ]
rr[rr$reads == 1000, ]
rr[rr$reads == 10000, ]
gg2
c(0,3,F,NA)
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next()
} else if(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']!=0){
print(2)
next()
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = 0
}else{next()}
}
print(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])
}
}
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=0+
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=0
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=0
i
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=9
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=0
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=7
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=NA
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']=F
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next()
} else if(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] != 0){
print(2)
next()
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = 0
}else{next()}
}
print(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])
}
}
ggplot(gg2, aes(x = H, y = S, fill = ValidH)) + geom_tile()
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next()
} else if(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] != 0){
print(2)
next()
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = 0
}else{next()}
}
print(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])
}
}
gg2 = expand.grid(H = Hvalues, S = Svalues)
gg2$ValidH = rep(NA, nrow(gg2))
gg2$ValidS = rep(NA, nrow(gg2))
rownames(gg2) = paste0(gg2$H, '_', gg2$S)
for (r in sort(reads)){
print(r)
srr = rr[rr$reads == r, ]
# Fix a relative error to be considered acceptable: Ex: 0.10
for (i in c(1:nrow(srr))) {
print(r)
#print(srr[i,])
#print(gg2[paste0(srr$H[i], '_', srr$S[i]),])
if (is.na(srr$Herror[i])){
print(1)
next()
} else if(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] != 0){
print(2)
next()
} else {
print(3)
if (abs(srr$Herror[i]) < 0.1){
print('fff')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = r # save minimun number of reads to satisfy this criteria
}else if (abs(srr$Herror[i]) > 0.1){
print('gg')
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'] = 0
}else{next()}
}
print(gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH'])
}
}
gg2
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']
gg2[paste0(srr$H[i], '_', srr$S[i]), 'ValidH']
rlnorm(20, meanlog = 0, sdlog = 0.1)
lognormal(mu, sd, nSpecies)
P.cluster.matrixNdb %>% filter(primary_cluster == i) %>% select(querry_short, reference_short, ani) %>% acast(reference_short ~ querry_short, value.var = "ani")
Ndb %>% filter(primary_cluster == i) %>% select(querry_short, reference_short, ani) %>% acast(reference_short ~ querry_short, value.var = "ani")
P.cluster.more3samples
P.cluster.more3sample
seed(5)
library(upset)
library('upset')
install.packages("upsetjs")
library(upsetR)
install.packages("UpSetR")
library("UpSetR")
upset(movies,attribute.plots=list(gridrows=60,plots=list(list(plot=scatter_plot, x="ReleaseDate", y="AvgRating"),
list(plot=scatter_plot, x="ReleaseDate", y="Watches"),list(plot=scatter_plot, x="Watches", y="AvgRating"),
list(plot=histogram, x="ReleaseDate")), ncols = 2))
movies <- read.csv( system.file("extdata", "movies.csv", package = "UpSetR"), header=T, sep=";" )
mutations <- read.csv( system.file("extdata", "mutations.csv", package = "UpSetR"), header=T, sep = ",")
upset(movies,attribute.plots=list(gridrows=60,plots=list(list(plot=scatter_plot, x="ReleaseDate", y="AvgRating"),
list(plot=scatter_plot, x="ReleaseDate", y="Watches"),list(plot=scatter_plot, x="Watches", y="AvgRating"),
list(plot=histogram, x="ReleaseDate")), ncols = 2))
View(movies)
View(mutations)
load_metadata = function(path2file){
# Metadata
metadata = read.table(path2file, header = T, row.names = 2, stringsAsFactors = F, sep = '\t', check.names = F, dec = ',')
colnames(metadata) = c('N', 'done', 'available_metadata', 'SQMrun', 'assembly', 'Leg', 'CodeMP', 'Date',
'Station', 'DepthEst', 'Depth', 'MaxZ', 'Lat', 'Long', 'Longhurst', 'SamplingMethod',
'Cast', 'Niskin', 'Barcode', 'Day', 'Nreplicate', 'FilterSize', 'Vreplicate',
'Temp', 'Cond', 'Ox_v', 'Fluo', 'PAR', 'SPAR', 'Turb', 'Batt', 'Sal', 'Ox',
'02DNA', '3DNA', '02RNA', '3RNA')
meta = metadata[,c('Station', 'DepthEst', 'Depth', 'MaxZ', 'Longhurst', 'FilterSize', 'Temp', 'Cond', 'Ox_v', 'Fluo', 'PAR', 'Sal', 'Ox')]
meta2 = meta[meta$FilterSize == 0.2, ]
meta2$Longhurst = as.factor(meta2$Longhurst)
return(meta2)
}
install.packages(('ggtext'))
library('vegan')
install.packages("vegan")
library(UpSetR)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
library(UpSetR)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
listInput <- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5,
10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))
# example of expression input
expressionInput <- c(one = 2, two = 1, three = 2, `one&two` = 1, `one&three` = 4,
`two&three` = 1, `one&two&three` = 2)
upset(fromList(listInput), order.by = "freq"
)
upset(fromList(listInput), order.by = "freq")
View(movies)
View(listInput)
expressionInput
fromList(listInput)
listInput
pk = c('vegan', 'ggplot2')
for (i in pk) {library(i)}
for (i in pk) {library(get(i)}
for (i in pk) {print(i)}
for (i in pk) {print(get(i)}
for (i in pk) {print(get(i))}
for (i in pk) {library(get(i))}
for (i in pk) {library(get(as.character(i)))}
for (i in pk) {library(get(i))}
for(pkg in c("ggplot2", "dplyr")){
library(pkg, character.only = TRUE)
}
for(pkg in c("ggplot2", "vegan")){
library(pkg, character.only = TRUE)
}
getSplit = function(oneString, delim){
return(unlist(strsplit(oneString, delim),use.names = F))
}
'AD SS KF'
getSplit('AD SS KF')
getSplit('AD SS KF', delim = ' ')
a=getSplit('AD SS KF', delim = ' ')
a
print(a)
d= 'AD SS KF'
paste0(",", d, ",")
getSplit(d, delim = ' ')
strsplit(oneString, delim),use.names = F)
strsplit(oneString, delim)
strsplit(d, delim)
strsplit(d, ' ')
unlist(strsplit(d, ' '),use.names = F)
paste(unlist(strsplit(d, ' '),use.names = F), ',')
e=unlist(strsplit(d, ' '),use.names = F)
class(e)
as.vector(e)
print(as.vector(e))
paste0(d, collapse = ", ")
paste0(a, collapse = ", ")
a
d
a
unlist(paste0(a, collapse = ", "))
unlist(paste0(a, collapse = ", "), use.names = F)
unlist(paste0(a, collapse = "," "))
""
paste0(a, collapse = ",\" ")
paste0(a, collapse = ",[["]] ")
paste0(a, collapse = ",["] ")
paste0(a, collapse = ",' ")
a
paste0(a, collapse = ",")
strsplit(paste0(a, collapse = ","), ',')
strsplit(paste0(a, collapse = ","), ' ')
paste0(a, collapse = ",")
paste0(a, collapse = "\",\")
)
)""
""
paste0(a, collapse = "\",\"")
paste0(a, collapse = "','")
gsub(paste0(a, collapse = "','"), "\"")
paste0(a, collapse = "','")
paste0(a, collapse = "[[","]]")
paste0(a, collapse = [[","]])
paste0(a, collapse = '\",\"')
paste0(a, collapse = '",\"')
paste0(a, collapse = '\","')
paste0(a, collapse = '\\",\\"')
paste0(a, collapse = '","')
paste0(a, collapse = '","')
library(reshape2)
library(reshape2)
library(RColorBrewer)
install.packages("ggridges")
library(ggplot2)
library(ggridges)
ggplot(diamonds, aes(x = price, y = cut)) +
geom_density_ridges(scale = 4) +
scale_y_discrete(expand = c(0, 0)) +     # will generally have to set the `expand` option
scale_x_continuous(expand = c(0, 0)) +   # for both axes to remove unneeded padding
coord_cartesian(clip = "off") + # to avoid clipping of the very top of the top ridgeline
theme_ridges()
diamond
diamonds
plot(c(1,2,3), c(4,5,6))
grep(pattern = 'aaa', x = c('aaaddd', 'aaa'))
a = 'aaa'
grep(pattern = a, x = c('aaaddd', 'aaa'))
setwd("~/opt/MMs/DB")
ent = read.table('Johnson2019Evaluation16S.tsv', sep = '\t', header=T)
View(ent)
plot(ent$Base_Position~ent$Entropy)
plot(x = ent$Base_Position, y = ent$Entropy)
View(ent)
plot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1))
max(ent$Entropy)
ent = read.table('Johnson2019Evaluation16S.tsv', sep = '\t', header=T, quote = F)
ent = read.table('Johnson2019Evaluation16S.tsv', sep = '\t', header=T, quote = T)
ent = read.table('Johnson2019Evaluation16S.tsv', sep = '\t', header=T, quote = """)
""
as.numeric(ent$Entropy)
ent$Entropy
unquote(ent$Entropy)
ent = read.table('Johnson2019Evaluation16S.tsv', sep = '\t', header=T)
str(ent)
ent = read.table('Johnson2019_Evaluation16S.csv', sep = '\t', header=T)
ent = read.table('Johnson2019Evaluation16S.tsv', sep = '\t', header=T, dec = ',')
str(ent)
plot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1))
plot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1)
)
plot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = '.')
smoothScatter(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = '.')
plot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = '.', xlab = 'Position', ylab = 'Entropy')
smoothScatter(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = '.', xlab = 'Position', ylab = 'Entropy')
smoothScatter(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = 19, xlab = 'Position', ylab = 'Entropy')
plot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = 19, xlab = 'Position', ylab = 'Entropy')
barplot(x = ent$Base_Position, y = ent$Entropy, ylim=c(0,1), pch = 19, xlab = 'Position', ylab = 'Entropy')
barplot(names = ent$Base_Position, height = ent$Entropy, ylim=c(0,1), pch = 19, xlab = 'Position', ylab = 'Entropy')
barplot(names = ent$Base_Position, height = ent$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
abline(v = 69, col = 'red')
barplot(names = ent$Base_Position, height = ent$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
abline(v = 69, col = 'red')
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
regions = read.table('../DB/variableRegions_Ecoli_Brosius1978.tsv', sep = '\t')
regions
regions = read.table('../DB/variableRegions_Ecoli_Brosius1978.tsv', sep = '\t', row.names = 1)
colnames(regions) = c('start', 'end')
colnames(regions) = c('start', 'end')
#plot(x = data$Base_Position, y = data$Entropy, ylim=c(0,1), pch = 19, xlab = 'Position', ylab = 'Entropy')
#smoothScatter(x = data$Base_Position, y = data$Entropy, ylim=c(0,1), pch = 19, xlab = 'Position', ylab = 'Entropy')
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
for (r in regions$start){
abline(v = r, col = 'red')
}
for (r in regions$end){
abline(v = r, col = 'blue')
}
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
for (r in regions$start){
abline(v = r, col = 'red')
}
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
abline(v = regions$start, col = 'red')
abline(v = regions$end, col = 'blue')
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
data = read.table('../DB/Johnson2019Evaluation16S.tsv', sep = '\t', header=T, dec = ',')
regions = read.table('../DB/variableRegions_Ecoli_Brosius1978.tsv', sep = '\t', row.names = 1)
colnames(regions) = c('start', 'end')
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
abline(v = regions$start, col = 'red')
abline(v = regions$end, col = 'blue')
barplot(names = data$Base_Position, height = data$Entropy, ylim=c(0,0.5), pch = 19, xlab = 'Position', ylab = 'Entropy')
abline(v = regions$start, col = 'red')
abline(v = regions$end, col = 'blue')
